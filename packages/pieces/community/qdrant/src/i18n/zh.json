{
  "Make any action on your qdrant vector database": "在您的 qdrant 矢量数据库上做任何操作",
  "Server Address": "服务器地址",
  "API KEY": "API 密钥",
  "The url of the Qdrant instance.": "Qdrant 实例的网址。",
  "Enter the API Key of your Qdrant account": "输入您的 Qdrant 帐户的 API 密钥",
  "\n### Using Qdrant cloud\n1. Connect to your [Qdrant cloud account](https://cloud.qdrant.io)\n2. Create a new cluster if it's the first time you  use Qdrant\n3. Go to Data Access Control and create a new api key and copy it\n4. Go to clusters, click on the arrow `>` and copy the Cluster URL.\n\n### Using self-hosted Qdrant\nTry to create your own qdrant instance using the [documentation guides](https://qdrant.tech/documentation/guides/)\n": "\n### Using Qdrant cloud\n1. Connect to your [Qdrant cloud account](https://cloud.qdrant.io)\n2. Create a new cluster if it's the first time you  use Qdrant\n3. Go to Data Access Control and create a new api key and copy it\n4. Go to clusters, click on the arrow `>` and copy the Cluster URL.\n\n### Using self-hosted Qdrant\nTry to create your own qdrant instance using the [documentation guides](https://qdrant.tech/documentation/guides/)\n",
  "Add points to collection": "添加点到收藏",
  "Get Collection List": "获取收藏列表",
  "Get Collection Infos": "获取收藏信息",
  "Delete Collection": "删除收藏",
  "Delete Points": "删除点",
  "Get Points": "获得积分",
  "Search Points": "搜索点",
  "Insert a point (= embedding or vector + other infos) to a specific collection, if the collection does not exist it will be created": "如果收藏不存在，将创建一个点 (= 嵌入或矢量+ 其他信息) 到特定收藏中",
  "Get the list of all the collections of your database": "获取数据库所有收藏列表",
  "Get the all the infos of a specific collection": "获取特定收藏集的所有信息",
  "Delete a collection of your database": "删除您的数据库收藏",
  "Delete points of a specific collection": "删除特定收藏的点",
  "Get the points of a specific collection": "获取特定集合的点",
  "Search for points closest to your given vector (= embedding)": "搜索距离您给定矢量最近的点 (= 嵌入)",
  "Collection Name": "收藏名称",
  "Embeddings": "嵌入",
  "Embeddings Ids": "嵌入式ID",
  "Calculation Method of distance": "距离计算方法",
  "Additional Payload": "额外的有效载荷",
  "Storage": "存储",
  "Choose Points By": "选择点由",
  "By ids or filtering": "通过id或过滤",
  "Embedding": "Embedding",
  "Must Have": "必须有",
  "Must Not Have": "必须没有",
  "Negative Vector": "负矢量",
  "Limit Result": "限制结果",
  "The name of the collection needed for this action": "此动作所需收藏的名称",
  "Embeddings (= vectors) for the points": "点的嵌入式 (= 矢量)",
  "The ids of the embeddings for the points. If not provided, the ids will be generated automatically": "点嵌入的 id。如果没有提供，id将自动生成",
  "The calculation method helps to rank vectors when you want to find the closest points, the method to use depends on the model who's created the embeddings, see the documentation of your model": "计算方法有助于在您想要找到最近的点时排名向量器。 要使用的方法取决于模型是谁创建了嵌入，见您模型的文档。",
  "Please follow [payload documentation](https://qdrant.tech/documentation/concepts/payload/) to add additional information to the points.": "请关注 [payload 文档] (https://qdrant.tech/documentation/concepts/payload/) 来添加更多信息到各个点。",
  "Define where points will be stored": "定义要存储点的位置",
  "The method to use to get the points": "用来获取点数的方法",
  "The infos to select points": "要选择点的信息",
  "The vector (= embedding) you want to search for.": "您想要搜索的向量 (= 嵌入) 。",
  "If the point have this property in his payload it will be selected": "如果该点在他的有效载荷中包含这个属性，它将被选择",
  "If the point have this property in his payload it will not be selected": "如果该点在他的有效载荷中包含这个属性，它将不被选择",
  "The vector (= embedding) you want to be the farthest.": "矢量 (= 嵌入) 您想要成为远方的矢量。",
  "The max number of results you want to get.": "您想要获取的结果的最大数量。",
  "Cosine": "Cosine",
  "Euclidean": "Euclidean",
  "Dot": "点数",
  "on Disk": "在磁盘上",
  "On Memory": "内存中",
  "Ids": "ID",
  "Filtering": "过滤"
}