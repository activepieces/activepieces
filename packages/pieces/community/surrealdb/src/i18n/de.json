{
  "SurrealDB": "SurrealDB",
  "Multi Model Database": "Multimodelldatenbank",
  "Connection URL": "Verbindungs-URL",
  "Database": "Datenbank",
  "Namespace": "Namensraum",
  "Username": "Benutzername",
  "Password": "Kennwort",
  "Connection string, e.g. http://1.2.3.5:8000.": "Verbindungsstring, z.B. http://1.2.3.5:8000.",
  "A string indicating the name of the database to connect to.": "Ein String, der den Namen der zu verbindenden Datenbank angibt.",
  "As string indicating the namespace of the database to connect to.": "Als Zeichenkette, der den Namensraum der zu verbindenden Datenbank angibt.",
  "As string indicating the username of the database to connect to.": "Als String, der den Benutzernamen der zu verbindenden Datenbank angibt.",
  "As string indicating the password of the database to connect to.": "Als Zeichenkette, der das Passwort der zu verbindenden Datenbank angibt.",
  "Run Query": "Abfrage ausführen",
  "Run a query in SurrealDB.": "Eine Abfrage in SurrealDB ausführen.",
  "Markdown": "Markdown",
  "Query": "Abfrage",
  "Arguments": "Argumente",
  "Query Timeout (ms)": "Abfrage-Timeout (ms)",
  "Application Name": "Anwendungsname",
  "\n        **NOTE:** Prevent SQL injection by using parameterized queries.\n      ": "\n        **HINWEIS:** Verhindere SQL-Einschleusung durch parametrierte Abfragen.\n      ",
  "Provide a SurrealDB query string to execute.": "Geben Sie einen SurrealDB Abfrage-String zum Ausführen an.",
  "\n        **NOTE:** Query example: `SELECT * FROM table_name WHERE name = $name`. Then add the name parameter in the arguments.\n      ": "\n        **HINWEIS:** Abfragebeispiel: `SELECT * FROM table_name WHERE name = $name`. Fügen Sie dann den Namensparameter in die Argumente ein.\n      ",
  "Add all arguments as names here, don't add the $ sign.": "Füge hier alle Argumente als Namen hinzu, füge nicht das $ Zeichen hinzu.",
  "The maximum time to wait for a query to complete before timing out.": "Die maximale Wartezeit, bis die Abfrage abgeschlossen ist, bevor die Abfrage beendet wird.",
  "An identifier for the client application executing the query.": "Ein Bezeichner für die Client-Anwendung, die die Abfrage ausführt.",
  "New Row": "Neue Zeile",
  "Triggers when a new row is added to the defined table.": "Wird ausgelöst, wenn eine neue Zeile der definierten Tabelle hinzugefügt wird.",
  "Table name": "Tabellenname",
  "Column to order by": "Zu bestellende Spalte nach",
  "Order Direction": "Bestellrichtung",
  "**NOTE:** The trigger fetches the latest rows using the provided order by column (newest first), and then will keep polling until the previous last row is reached. It's suggested to add a created_at timestamp. `DEFINE FIELD OVERWRITE createdAt ON schedule VALUE time::now() READONLY;`": "**HINWEIS:** Der Trigger holt die neuesten Zeilen mit der angegebenen Reihenfolge nach Spalte (neueste zuerst) und wird dann weiter abfragen, bis die letzte Zeile erreicht ist. Es wird vorgeschlagen, einen created_at Timestamp hinzuzufügen. `DEFINE FIELD OVERWRITE createdAt ON Zeitplan VALUE time::now() READONLY;`",
  "Use something like a created timestamp.": "Verwenden Sie so etwas wie einen erstellten Zeitstempel.",
  "The direction to sort by such that the newest rows are fetched first.": "Die zu sortierende Richtung, so dass die neuesten Zeilen zuerst abgerufen werden.",
  "Ascending": "Aufsteigend",
  "Descending": "Absteigend"
}