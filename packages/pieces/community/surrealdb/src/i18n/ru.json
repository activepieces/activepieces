{
  "SurrealDB": "SurrealDB",
  "Multi Model Database": "Мультимодельная база данных",
  "Connection URL": "URL подключения",
  "Database": "База данных",
  "Namespace": "Пространство имен",
  "Username": "Имя пользователя",
  "Password": "Пароль",
  "Connection string, e.g. http://1.2.3.5:8000.": "Строка подключения, например http://1.2.3.5:8000.",
  "A string indicating the name of the database to connect to.": "Строка, указывающая имя базы данных для подключения.",
  "As string indicating the namespace of the database to connect to.": "Как строка, указывающая пространство имен базы данных для подключения.",
  "As string indicating the username of the database to connect to.": "Как строка, указывающая имя пользователя базы данных подключиться.",
  "As string indicating the password of the database to connect to.": "Как строка, указывающая пароль базы данных для подключения.",
  "Run Query": "Запустить запрос",
  "Run a query in SurrealDB.": "Запустите запрос в SurrealDB.",
  "Markdown": "Markdown",
  "Query": "Запрос",
  "Arguments": "Аргументы",
  "Query Timeout (ms)": "Таймаут запроса (мс)",
  "Application Name": "Название приложения",
  "\n        **NOTE:** Prevent SQL injection by using parameterized queries.\n      ": "\n        **ПРИМЕЧАНИЕ:** Предотвратить инъекцию SQL с помощью параметризованных запросов.\n      ",
  "Provide a SurrealDB query string to execute.": "Предоставить строку запроса SurrealDB для выполнения.",
  "\n        **NOTE:** Query example: `SELECT * FROM table_name WHERE name = $name`. Then add the name parameter in the arguments.\n      ": "\n        **ПРИМЕЧАНИЕ:** Пример запроса: `SELECT * FROM table_name WHERE name = $name`. Затем добавьте имя параметра в аргументы.\n      ",
  "Add all arguments as names here, don't add the $ sign.": "Добавьте здесь все аргументы как имена, не добавляйте знак $.",
  "The maximum time to wait for a query to complete before timing out.": "Максимальное время ожидания выполнения запроса до истечения таймаута.",
  "An identifier for the client application executing the query.": "Идентификатор клиентского приложения, выполняющего запрос.",
  "New Row": "Новая строка",
  "Triggers when a new row is added to the defined table.": "Включает при добавлении новой строки в заданную таблицу.",
  "Table name": "Название таблицы",
  "Column to order by": "Столбец для заказа на",
  "Order Direction": "Направление заказа",
  "**NOTE:** The trigger fetches the latest rows using the provided order by column (newest first), and then will keep polling until the previous last row is reached. It's suggested to add a created_at timestamp. `DEFINE FIELD OVERWRITE createdAt ON schedule VALUE time::now() READONLY;`": "**ПРИМЕЧАНИЕ:** Триггер получает последние строки, используя указанный порядок по столбцу (сначала новые), и будет продолжать голосовать до тех пор, пока не будет достигнута предыдущая строка. Рекомендуется добавить created_at timestamp. `УСТАНОВИТЬ ФАЙЛ OVERWRITE createdAt ON schedule VALUE time::now() READONLY;`",
  "Use something like a created timestamp.": "Использовать что-то вроде созданной метки времени.",
  "The direction to sort by such that the newest rows are fetched first.": "Направление сортировки, по которому сначала получаются самые новые строки.",
  "Ascending": "По возрастанию",
  "Descending": "По убыванию"
}