{
  "Multi Model Database": "Multi Model Database",
  "Connection URL": "Connection URL",
  "Database": "Database",
  "Namespace": "Namespace",
  "Username": "Username",
  "Password": "Password",
  "Connection string, e.g. http://1.2.3.5:8000.": "Connection string, e.g. http://1.2.3.5:8000.",
  "A string indicating the name of the database to connect to.": "A string indicating the name of the database to connect to.",
  "As string indicating the namespace of the database to connect to.": "As string indicating the namespace of the database to connect to.",
  "As string indicating the username of the database to connect to.": "As string indicating the username of the database to connect to.",
  "As string indicating the password of the database to connect to.": "As string indicating the password of the database to connect to.",
  "Run Query": "Run Query",
  "Run a query in SurrealDB.": "Run a query in SurrealDB.",
  "Markdown": "Markdown",
  "Query": "Query",
  "Arguments": "Arguments",
  "Query Timeout (ms)": "Query Timeout (ms)",
  "Application Name": "Application Name",
  "\n        **NOTE:** Prevent SQL injection by using parameterized queries.\n      ": "\n        **NOTE:** Prevent SQL injection by using parameterized queries.\n      ",
  "Provide a SurrealDB query string to execute.": "Provide a SurrealDB query string to execute.",
  "\n        **NOTE:** Query example: `SELECT * FROM table_name WHERE name = $name`. Then add the name parameter in the arguments.\n      ": "\n        **NOTE:** Query example: `SELECT * FROM table_name WHERE name = $name`. Then add the name parameter in the arguments.\n      ",
  "Add all arguments as names here, don't add the $ sign.": "Add all arguments as names here, don't add the $ sign.",
  "The maximum time to wait for a query to complete before timing out.": "The maximum time to wait for a query to complete before timing out.",
  "An identifier for the client application executing the query.": "An identifier for the client application executing the query.",
  "New Row": "New Row",
  "Triggers when a new row is added to the defined table.": "Triggers when a new row is added to the defined table.",
  "Table name": "Table name",
  "Column to order by": "Column to order by",
  "Order Direction": "Order Direction",
  "**NOTE:** The trigger fetches the latest rows using the provided order by column (newest first), and then will keep polling until the previous last row is reached. It's suggested to add a created_at timestamp. `DEFINE FIELD OVERWRITE createdAt ON schedule VALUE time::now() READONLY;`": "**NOTE:** The trigger fetches the latest rows using the provided order by column (newest first), and then will keep polling until the previous last row is reached. It's suggested to add a created_at timestamp. `DEFINE FIELD OVERWRITE createdAt ON schedule VALUE time::now() READONLY;`",
  "Use something like a created timestamp.": "Use something like a created timestamp.",
  "The direction to sort by such that the newest rows are fetched first.": "The direction to sort by such that the newest rows are fetched first.",
  "Ascending": "Ascending",
  "Descending": "Descending"
}