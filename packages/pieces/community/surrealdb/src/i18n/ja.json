{
  "SurrealDB": "SurrealDB",
  "Multi Model Database": "マルチモデルデータベース",
  "Connection URL": "接続URL",
  "Database": "データベース",
  "Namespace": "名前空間",
  "Username": "ユーザー名",
  "Password": "Password",
  "Connection string, e.g. http://1.2.3.5:8000.": "接続文字列。例: http://1.2.3.5:8000。",
  "A string indicating the name of the database to connect to.": "接続するデータベースの名前を示す文字列。",
  "As string indicating the namespace of the database to connect to.": "接続するデータベースの名前空間を示す文字列として。",
  "As string indicating the username of the database to connect to.": "接続するデータベースのユーザー名を示す文字列です。",
  "As string indicating the password of the database to connect to.": "接続するデータベースのパスワードを示す文字列として",
  "Run Query": "クエリの実行",
  "Run a query in SurrealDB.": "SurrealDB でクエリを実行します。",
  "Markdown": "Markdown",
  "Query": "クエリ",
  "Arguments": "引数",
  "Query Timeout (ms)": "クエリのタイムアウト (ms)",
  "Application Name": "アプリケーション名",
  "\n        **NOTE:** Prevent SQL injection by using parameterized queries.\n      ": "\n        **注意:** パラメータ化されたクエリを使用してSQLインジェクションを防止します。\n      ",
  "Provide a SurrealDB query string to execute.": "実行するSurrealDBクエリ文字列を指定します。",
  "\n        **NOTE:** Query example: `SELECT * FROM table_name WHERE name = $name`. Then add the name parameter in the arguments.\n      ": "\n        **注意:** クエリ例: `SELECT * FROM table_name WHERE名 = $name`。そして引数にname パラメータを追加します。\n      ",
  "Add all arguments as names here, don't add the $ sign.": "ここにすべての引数を名前として追加し、$ 記号を追加しないでください。",
  "The maximum time to wait for a query to complete before timing out.": "タイムアウト前にクエリが完了するのを待つ最大時間。",
  "An identifier for the client application executing the query.": "クエリを実行しているクライアント・アプリケーションの識別子。",
  "New Row": "新しい行",
  "Triggers when a new row is added to the defined table.": "定義されたテーブルに新しい行が追加されたときにトリガーされます。",
  "Table name": "テーブル名",
  "Column to order by": "次の順序の列",
  "Order Direction": "注文の方向",
  "**NOTE:** The trigger fetches the latest rows using the provided order by column (newest first), and then will keep polling until the previous last row is reached. It's suggested to add a created_at timestamp. `DEFINE FIELD OVERWRITE createdAt ON schedule VALUE time::now() READONLY;`": "**注意:** トリガーは与えられた順序で最新の行を取得します（最新の順序）。 最後の行に達するまでポーリングを続けます。 created_at timestampを追加することをお勧めします。`DEFINE FIELD OVERWRITE createdAt schedule VALUE time::now() READONLY;`",
  "Use something like a created timestamp.": "作成したタイムスタンプのようなものを使用します。",
  "The direction to sort by such that the newest rows are fetched first.": "最新の行が最初に取得されるように並べ替える方向。",
  "Ascending": "昇順",
  "Descending": "降順"
}