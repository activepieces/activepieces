{
  "SurrealDB": "SurrealDB",
  "Multi Model Database": "Base de données multi-modèles",
  "Connection URL": "URL de la connexion",
  "Database": "Base de données",
  "Namespace": "Espace de noms",
  "Username": "Nom d'utilisateur",
  "Password": "Password",
  "Connection string, e.g. http://1.2.3.5:8000.": "Chaîne de connexion, par exemple http://1.2.3.5:8000.",
  "A string indicating the name of the database to connect to.": "Une chaîne indiquant le nom de la base de données à laquelle se connecter.",
  "As string indicating the namespace of the database to connect to.": "En tant que chaîne de caractères indiquant l'espace de noms de la base de données auquel se connecter.",
  "As string indicating the username of the database to connect to.": "En tant que chaîne indiquant le nom d'utilisateur de la base de données auquel se connecter.",
  "As string indicating the password of the database to connect to.": "En tant que chaîne de caractères indiquant le mot de passe de la base de données auquel se connecter.",
  "Run Query": "Exécuter la requête",
  "Run a query in SurrealDB.": "Exécuter une requête dans SurrealDB.",
  "Markdown": "Markdown",
  "Query": "Requête",
  "Arguments": "Arguments",
  "Query Timeout (ms)": "Délai de requête (ms)",
  "Application Name": "Nom de l'application",
  "\n        **NOTE:** Prevent SQL injection by using parameterized queries.\n      ": "\n        **NOTE:** Empêcher l'injection SQL en utilisant des requêtes paramétrées.\n      ",
  "Provide a SurrealDB query string to execute.": "Fournir une chaîne de requête SurrealDB à exécuter.",
  "\n        **NOTE:** Query example: `SELECT * FROM table_name WHERE name = $name`. Then add the name parameter in the arguments.\n      ": "\n        **NOTE:** Exemple de requête : `SELECT * FROM table_name WHERE name = $name`. Puis ajouter le paramètre de nom dans les arguments.\n      ",
  "Add all arguments as names here, don't add the $ sign.": "Ajoute tous les arguments en tant que noms ici, n'ajoute pas le signe $.",
  "The maximum time to wait for a query to complete before timing out.": "Le temps maximum d'attente pour qu'une requête se termine avant la fin du délai.",
  "An identifier for the client application executing the query.": "Un identifiant pour l'application client exécutant la requête.",
  "New Row": "Nouvelle ligne",
  "Triggers when a new row is added to the defined table.": "Déclenche quand une nouvelle ligne est ajoutée à la table définie.",
  "Table name": "Nom du tableau",
  "Column to order by": "Colonne à ordonner par",
  "Order Direction": "Direction de la commande",
  "**NOTE:** The trigger fetches the latest rows using the provided order by column (newest first), and then will keep polling until the previous last row is reached. It's suggested to add a created_at timestamp. `DEFINE FIELD OVERWRITE createdAt ON schedule VALUE time::now() READONLY;`": "**NOTE:** Le trigger récupère les dernières lignes en utilisant l'ordre fourni par colonne (plus récent en premier), puis continuera de voter jusqu'à ce que la dernière ligne précédente soit atteinte. Il est suggéré d'ajouter un timestamp created_at. `DEFINE FIELD OVERWRITE createdAt ON schedule VALUE time::now() READONLY;`",
  "Use something like a created timestamp.": "Utilisez quelque chose comme un horodatage créé.",
  "The direction to sort by such that the newest rows are fetched first.": "La direction à suivre pour trier de telle sorte que les lignes les plus récentes soient récupérées en premier.",
  "Ascending": "Ascendant",
  "Descending": "Descendant"
}