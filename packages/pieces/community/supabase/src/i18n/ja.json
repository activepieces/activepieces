{
  "Supabase": "Supabase",
  "The open-source Firebase alternative": "オープンソースのFirebase代替品",
  "Project URL": "Project URL",
  "API Key": "API キー",
  "Your Supabase project URL (e.g., https://your-project-ref.supabase.co)": "Your Supabase project URL (e.g., https://your-project-ref.supabase.co)",
  "Service Role Key (for actions) or Anonymous Key (for basic triggers)": "Service Role Key (for actions) or Anonymous Key (for basic triggers)",
  "\n## Supabase Connection Setup\n\n### 1. Get Your Project URL\n- Go to your [Supabase Dashboard](https://supabase.com/dashboard)\n- Select your project\n- Go to **Settings** → **API**\n- Copy the **Project URL** (format: `https://your-project-ref.supabase.co`)\n\n### 2. Get Your API Key\nChoose the appropriate key based on your use case:\n\n**For Actions (Database Operations):**\n- Use **Service Role Key** (secret) for server-side operations\n- Has full access to bypass Row Level Security (RLS)\n\n**For Triggers (Webhooks)": "\n## Supabase Connection Setup\n\n### 1. Get Your Project URL\n- Go to your [Supabase Dashboard](https://supabase.com/dashboard)\n- Select your project\n- Go to **Settings** → **API**\n- Copy the **Project URL** (format: `https://your-project-ref.supabase.co`)\n\n### 2. Get Your API Key\nChoose the appropriate key based on your use case:\n\n**For Actions (Database Operations):**\n- Use **Service Role Key** (secret) for server-side operations\n- Has full access to bypass Row Level Security (RLS)\n\n**For Triggers (Webhooks):**\n- Use **Anonymous Key** (public) if your webhooks don't need elevated permissions\n- Use **Service Role Key** for elevated permissions\n\n**Security Note:** Keep your Service Role Key secret - it bypasses all RLS policies.\n\nFind your keys in **Settings** → **API** → **Project API keys**\n",
  "Upload File": "ファイルをアップロード",
  "Create Row": "行を作成",
  "Update Row": "行を更新",
  "Upsert Row": "Upsert Row",
  "Delete Rows": "Delete Rows",
  "Search Rows": "Search Rows",
  "Custom API Call": "カスタムAPI通話",
  "Upload a file to Supabase Storage": "Supabase Storageにファイルをアップロード",
  "Create a new row in a table": "Create a new row in a table",
  "Update rows in a table based on filter criteria": "Update rows in a table based on filter criteria",
  "Insert or update a row in a table": "Insert or update a row in a table",
  "Remove rows matching filter criteria from a table": "Remove rows matching filter criteria from a table",
  "Search for rows in a table with filters and pagination": "Search for rows in a table with filters and pagination",
  "Make a custom API call to a specific endpoint": "特定のエンドポイントへのカスタム API コールを実行します。",
  "File path": "ファイルパス",
  "Bucket": "バケツ入りバケツ",
  "Base64 or URL": "Base64 または URL",
  "Table Name": "テーブル名",
  "Row Data": "行データ",
  "Return Created Row": "Return Created Row",
  "Filter Type": "Filter Type",
  "Filter Column": "Filter Column",
  "Filter Value": "Filter Value",
  "Filter Values": "Filter Values",
  "Update Data": "Update Data",
  "Count Updated Rows": "Count Updated Rows",
  "Return Updated Rows": "Return Updated Rows",
  "Conflict Column": "Conflict Column",
  "Count Upserted Rows": "Count Upserted Rows",
  "Return Upserted Rows": "Return Upserted Rows",
  "Count Deleted Rows": "Count Deleted Rows",
  "Return Deleted Rows": "Return Deleted Rows",
  "Columns": "列",
  "Filters": "絞り込み",
  "Page": "ページ",
  "Page Size": "ページサイズ",
  "Count Algorithm": "Count Algorithm",
  "Method": "方法",
  "Headers": "ヘッダー",
  "Query Parameters": "クエリパラメータ",
  "Body": "本文",
  "Response is Binary ?": "応答はバイナリですか?",
  "No Error on Failure": "失敗時にエラーはありません",
  "Timeout (in seconds)": "タイムアウト（秒）",
  "Select a table from your database": "Select a table from your database",
  "Enter the data for each column": "Enter the data for each column",
  "Whether to return the created row": "Whether to return the created row",
  "How to identify rows to update": "How to identify rows to update",
  "Select the column to filter on": "フィルタリングする列を選択してください",
  "The value to match against (not used for \"in list\" filter)": "一致する値 (「リスト」フィルタでは使用されません)",
  "List of values for \"in list\" filter type": "\"リスト\"フィルタータイプの値のリスト",
  "Select which columns to update (auto-generated fields excluded)": "更新する列を選択してください（自動生成フィールドを除く）",
  "Whether to count the number of updated rows": "更新された行の数をカウントするか",
  "Whether to return the updated rows data": "更新された行データを返すかどうか",
  "Select the unique column to determine duplicates (required for upsert to work)": "重複を決定するために一意の列を選択します（アップセルを動作させるために必要）",
  "Enter data for the row (conflict detection handled separately)": "行のデータを入力してください（競合検出は別々に処理されます）",
  "Whether to count the number of upserted rows": "更新された行の数を数えるかどうか",
  "Whether to return the upserted rows data": "更新された行データを返すかどうか",
  "How to filter rows for deletion": "削除の行をフィルタリングする方法",
  "The value to match against (not used for null checks)": "一致する値 (null チェックでは使用されません)",
  "List of values for \"in\" filter type": "\"in\" フィルタータイプの値のリスト",
  "Whether to count the number of deleted rows": "削除された行の数をカウントするか",
  "Whether to return the deleted rows data": "削除された行データを返すかどうか",
  "Columns to return (comma-separated). Leave empty to return all columns.": "戻る列(カンマ区切り)。すべての列を返す場合は空のままにします。",
  "List of filters to apply": "適用するフィルターのリスト",
  "Page number for pagination (starts from 1)": "ページネーションのページ番号（1から始まる）",
  "Number of records per page (max 1000)": "Number of records per page (max 1000)",
  "Algorithm to use for counting rows": "行を数えるためのアルゴリズム",
  "Authorization headers are injected automatically from your connection.": "認証ヘッダは接続から自動的に注入されます。",
  "Enable for files like PDFs, images, etc..": "PDF、画像などのファイルを有効にします。",
  "Column equals value": "列の等しい値",
  "Column is in list of values": "列は値のリストにあります",
  "Column is greater than value": "列が値より大きいです",
  "Column not equals value": "列の値が等しくありません",
  "Column is in list": "列がリストにあります",
  "Column is greater than": "列より大きい",
  "Column is greater than or equal": "列が等しいかそれ以上です",
  "Column is less than": "列より小さい",
  "Column is less than or equal": "列が同じかそれ以下です",
  "Column is null": "列が null です",
  "Column is not null": "列がnullではありません",
  "Column matches pattern (LIKE)": "列一致パターン (LIKE)",
  "Column matches pattern (case-insensitive)": "列一致パターン（大文字と小文字を区別しません）",
  "Exact": "正確な",
  "Planned": "計画済み",
  "Estimated": "推定値",
  "GET": "取得",
  "POST": "POST",
  "PATCH": "PATCH",
  "PUT": "PUT",
  "DELETE": "削除",
  "HEAD": "頭",
  "New Row": "新しい行",
  "Fires when a new row is created in a table": "テーブルに新しい行が作成されたときに発行されます。",
  "Markdown": "Markdown",
  "Schema": "スキーマ",
  "## Setup Instructions\n\n1. **Go to your Supabase Dashboard** → Database → Webhooks\n2. **Click \"Create a new hook\"**\n3. **Configure the webhook:**\n   - **Name**: Give it a descriptive name (e.g., \"Activepieces New Row\")\n   - **Table**: Select the table you want to monitor\n   - **Events**: Check \"Insert\" \n   - **Type**: HTTP Request\n   - **Method**: POST\n   - **URL**: Copy and paste the webhook URL below\n4. **Click \"Create webhook\"**\n\n**Webhook URL:** `{{webhookUrl}}`\n\n## Important Notes\n- The webhook will sen": "## Setup Instructions\n\n1. **Go to your Supabase Dashboard** → Database → Webhooks\n2. **Click \"Create a new hook\"**\n3. **Configure the webhook:**\n   - **Name**: Give it a descriptive name (e.g., \"Activepieces New Row\")\n   - **Table**: Select the table you want to monitor\n   - **Events**: Check \"Insert\" \n   - **Type**: HTTP Request\n   - **Method**: POST\n   - **URL**: Copy and paste the webhook URL below\n4. **Click \"Create webhook\"**\n\n**Webhook URL:** `{{webhookUrl}}`\n\n## Important Notes\n- The webhook will send a JSON payload with the new row data\n- Make sure your table has the necessary permissions\n- You can test the webhook by inserting a new row into your table\n\nFor more details, see [Supabase Database Webhooks documentation](https://supabase.com/docs/guides/database/webhooks).",
  "Database schema (default: public)": "データベース スキーマ(デフォルト: public)"
}