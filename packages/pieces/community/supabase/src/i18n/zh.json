{
  "Supabase": "Supabase",
  "The open-source Firebase alternative": "开源火基备选方案",
  "Project URL": "Project URL",
  "API Key": "API 密钥",
  "Your Supabase project URL (e.g., https://your-project-ref.supabase.co)": "Your Supabase project URL (e.g., https://your-project-ref.supabase.co)",
  "Service Role Key (for actions) or Anonymous Key (for basic triggers)": "Service Role Key (for actions) or Anonymous Key (for basic triggers)",
  "\n## Supabase Connection Setup\n\n### 1. Get Your Project URL\n- Go to your [Supabase Dashboard](https://supabase.com/dashboard)\n- Select your project\n- Go to **Settings** → **API**\n- Copy the **Project URL** (format: `https://your-project-ref.supabase.co`)\n\n### 2. Get Your API Key\nChoose the appropriate key based on your use case:\n\n**For Actions (Database Operations):**\n- Use **Service Role Key** (secret) for server-side operations\n- Has full access to bypass Row Level Security (RLS)\n\n**For Triggers (Webhooks)": "\n## Supabase Connection Setup\n\n### 1. Get Your Project URL\n- Go to your [Supabase Dashboard](https://supabase.com/dashboard)\n- Select your project\n- Go to **Settings** → **API**\n- Copy the **Project URL** (format: `https://your-project-ref.supabase.co`)\n\n### 2. Get Your API Key\nChoose the appropriate key based on your use case:\n\n**For Actions (Database Operations):**\n- Use **Service Role Key** (secret) for server-side operations\n- Has full access to bypass Row Level Security (RLS)\n\n**For Triggers (Webhooks):**\n- Use **Anonymous Key** (public) if your webhooks don't need elevated permissions\n- Use **Service Role Key** for elevated permissions\n\n**Security Note:** Keep your Service Role Key secret - it bypasses all RLS policies.\n\nFind your keys in **Settings** → **API** → **Project API keys**\n",
  "Upload File": "上传文件",
  "Create Row": "创建行",
  "Update Row": "更新行",
  "Upsert Row": "更新行",
  "Delete Rows": "Delete Rows",
  "Search Rows": "Search Rows",
  "Custom API Call": "自定义 API 呼叫",
  "Upload a file to Supabase Storage": "上传文件到 Supabase 存储",
  "Create a new row in a table": "Create a new row in a table",
  "Update rows in a table based on filter criteria": "Update rows in a table based on filter criteria",
  "Insert or update a row in a table": "Insert or update a row in a table",
  "Remove rows matching filter criteria from a table": "Remove rows matching filter criteria from a table",
  "Search for rows in a table with filters and pagination": "Search for rows in a table with filters and pagination",
  "Make a custom API call to a specific endpoint": "将一个自定义 API 调用到一个特定的终点",
  "File path": "文件路径",
  "Bucket": "桶数",
  "Base64 or URL": "Base64 或 URL",
  "Table Name": "表名",
  "Row Data": "行数据",
  "Return Created Row": "Return Created Row",
  "Filter Type": "Filter Type",
  "Filter Column": "Filter Column",
  "Filter Value": "Filter Value",
  "Filter Values": "Filter Values",
  "Update Data": "Update Data",
  "Count Updated Rows": "Count Updated Rows",
  "Return Updated Rows": "Return Updated Rows",
  "Conflict Column": "Conflict Column",
  "Count Upserted Rows": "Count Upserted Rows",
  "Return Upserted Rows": "Return Upserted Rows",
  "Count Deleted Rows": "Count Deleted Rows",
  "Return Deleted Rows": "Return Deleted Rows",
  "Columns": "列",
  "Filters": "筛选器",
  "Page": "页",
  "Page Size": "页面大小",
  "Count Algorithm": "Count Algorithm",
  "Method": "方法",
  "Headers": "信头",
  "Query Parameters": "查询参数",
  "Body": "正文内容",
  "Response is Binary ?": "响应是二进制的？",
  "No Error on Failure": "失败时没有错误",
  "Timeout (in seconds)": "超时(秒)",
  "Select a table from your database": "Select a table from your database",
  "Enter the data for each column": "Enter the data for each column",
  "Whether to return the created row": "Whether to return the created row",
  "How to identify rows to update": "How to identify rows to update",
  "Select the column to filter on": "选择要过滤的列",
  "The value to match against (not used for \"in list\" filter)": "要匹配的值 (不用于\"在列表中\"过滤器)",
  "List of values for \"in list\" filter type": "“列表”过滤器类型的值列表",
  "Select which columns to update (auto-generated fields excluded)": "选择要更新的列数(不包括自动生成的字段)",
  "Whether to count the number of updated rows": "是否计算更新行数",
  "Whether to return the updated rows data": "是否返回更新的行",
  "Select the unique column to determine duplicates (required for upsert to work)": "选择唯一列来确定重复项 (上传要工作需要)",
  "Enter data for the row (conflict detection handled separately)": "输入行数据(单独处理冲突检测)",
  "Whether to count the number of upserted rows": "是否计算上传行数",
  "Whether to return the upserted rows data": "是否返回上传的行数据",
  "How to filter rows for deletion": "如何过滤要删除的行",
  "The value to match against (not used for null checks)": "要匹配的值 (不用于无效检查)",
  "List of values for \"in\" filter type": "\"in\"过滤器类型的值列表",
  "Whether to count the number of deleted rows": "是否计算删除行的数量",
  "Whether to return the deleted rows data": "是否返回删除的行",
  "Columns to return (comma-separated). Leave empty to return all columns.": "返回列(逗号分隔)。留空则返回所有列.",
  "List of filters to apply": "要应用的过滤器列表",
  "Page number for pagination (starts from 1)": "分页的页码 (从1) 开始",
  "Number of records per page (max 1000)": "每页记录数 (最大1000)",
  "Algorithm to use for counting rows": "用于计算行数的算法",
  "Authorization headers are injected automatically from your connection.": "授权头自动从您的连接中注入。",
  "Enable for files like PDFs, images, etc..": "启用 PDF、图像等文件。",
  "Column equals value": "列等于值",
  "Column is in list of values": "列在值列表",
  "Column is greater than value": "列大于值",
  "Column not equals value": "列不等于值",
  "Column is in list": "列在列表中",
  "Column is greater than": "列大于",
  "Column is greater than or equal": "列大于或等于",
  "Column is less than": "列小于",
  "Column is less than or equal": "列小于等于",
  "Column is null": "列为空",
  "Column is not null": "列不是空的",
  "Column matches pattern (LIKE)": "列匹配模式(LIKE)",
  "Column matches pattern (case-insensitive)": "列匹配模式 (大小写不敏感)",
  "Exact": "精准的",
  "Planned": "已计划",
  "Estimated": "估计",
  "GET": "获取",
  "POST": "帖子",
  "PATCH": "PATCH",
  "PUT": "弹出",
  "DELETE": "删除",
  "HEAD": "黑色",
  "New Row": "新行",
  "Fires when a new row is created in a table": "在表中创建一个新行时发生火灾。",
  "Markdown": "Markdown",
  "Schema": "图案",
  "## Setup Instructions\n\n1. **Go to your Supabase Dashboard** → Database → Webhooks\n2. **Click \"Create a new hook\"**\n3. **Configure the webhook:**\n   - **Name**: Give it a descriptive name (e.g., \"Activepieces New Row\")\n   - **Table**: Select the table you want to monitor\n   - **Events**: Check \"Insert\" \n   - **Type**: HTTP Request\n   - **Method**: POST\n   - **URL**: Copy and paste the webhook URL below\n4. **Click \"Create webhook\"**\n\n**Webhook URL:** `{{webhookUrl}}`\n\n## Important Notes\n- The webhook will sen": "## Setup Instructions\n\n1. **Go to your Supabase Dashboard** → Database → Webhooks\n2. **Click \"Create a new hook\"**\n3. **Configure the webhook:**\n   - **Name**: Give it a descriptive name (e.g., \"Activepieces New Row\")\n   - **Table**: Select the table you want to monitor\n   - **Events**: Check \"Insert\" \n   - **Type**: HTTP Request\n   - **Method**: POST\n   - **URL**: Copy and paste the webhook URL below\n4. **Click \"Create webhook\"**\n\n**Webhook URL:** `{{webhookUrl}}`\n\n## Important Notes\n- The webhook will send a JSON payload with the new row data\n- Make sure your table has the necessary permissions\n- You can test the webhook by inserting a new row into your table\n\nFor more details, see [Supabase Database Webhooks documentation](https://supabase.com/docs/guides/database/webhooks).",
  "Database schema (default: public)": "数据库schema (默认：公开)"
}