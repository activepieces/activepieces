{
  "Supabase": "Supabase",
  "The open-source Firebase alternative": "Die Open-Source Firebase-Alternative",
  "Project URL": "Project URL",
  "API Key": "API-Schlüssel",
  "Your Supabase project URL (e.g., https://your-project-ref.supabase.co)": "Your Supabase project URL (e.g., https://your-project-ref.supabase.co)",
  "Service Role Key (for actions) or Anonymous Key (for basic triggers)": "Service Role Key (for actions) or Anonymous Key (for basic triggers)",
  "\n## Supabase Connection Setup\n\n### 1. Get Your Project URL\n- Go to your [Supabase Dashboard](https://supabase.com/dashboard)\n- Select your project\n- Go to **Settings** → **API**\n- Copy the **Project URL** (format: `https://your-project-ref.supabase.co`)\n\n### 2. Get Your API Key\nChoose the appropriate key based on your use case:\n\n**For Actions (Database Operations):**\n- Use **Service Role Key** (secret) for server-side operations\n- Has full access to bypass Row Level Security (RLS)\n\n**For Triggers (Webhooks)": "\n## Supabase Connection Setup\n\n### 1. Get Your Project URL\n- Go to your [Supabase Dashboard](https://supabase.com/dashboard)\n- Select your project\n- Go to **Settings** → **API**\n- Copy the **Project URL** (format: `https://your-project-ref.supabase.co`)\n\n### 2. Get Your API Key\nChoose the appropriate key based on your use case:\n\n**For Actions (Database Operations):**\n- Use **Service Role Key** (secret) for server-side operations\n- Has full access to bypass Row Level Security (RLS)\n\n**For Triggers (Webhooks):**\n- Use **Anonymous Key** (public) if your webhooks don't need elevated permissions\n- Use **Service Role Key** for elevated permissions\n\n**Security Note:** Keep your Service Role Key secret - it bypasses all RLS policies.\n\nFind your keys in **Settings** → **API** → **Project API keys**\n",
  "Upload File": "Datei hochladen",
  "Create Row": "Zeile erstellen",
  "Update Row": "Zeile aktualisieren",
  "Upsert Row": "Upsert-Zeile",
  "Delete Rows": "Delete Rows",
  "Search Rows": "Search Rows",
  "Custom API Call": "Eigener API-Aufruf",
  "Upload a file to Supabase Storage": "Datei zum Supabase-Speicher hochladen",
  "Create a new row in a table": "Create a new row in a table",
  "Update rows in a table based on filter criteria": "Update rows in a table based on filter criteria",
  "Insert or update a row in a table": "Insert or update a row in a table",
  "Remove rows matching filter criteria from a table": "Remove rows matching filter criteria from a table",
  "Search for rows in a table with filters and pagination": "Search for rows in a table with filters and pagination",
  "Make a custom API call to a specific endpoint": "Einen benutzerdefinierten API-Aufruf an einen bestimmten Endpunkt machen",
  "File path": "Dateipfad",
  "Bucket": "Eimer",
  "Base64 or URL": "Base64 oder URL",
  "Table Name": "Tabellenname",
  "Row Data": "Zeilendaten",
  "Return Created Row": "Return Created Row",
  "Filter Type": "Filter Type",
  "Filter Column": "Filter Column",
  "Filter Value": "Filter Value",
  "Filter Values": "Filter Values",
  "Update Data": "Update Data",
  "Count Updated Rows": "Count Updated Rows",
  "Return Updated Rows": "Return Updated Rows",
  "Conflict Column": "Conflict Column",
  "Count Upserted Rows": "Count Upserted Rows",
  "Return Upserted Rows": "Return Upserted Rows",
  "Count Deleted Rows": "Count Deleted Rows",
  "Return Deleted Rows": "Return Deleted Rows",
  "Columns": "Spalten",
  "Filters": "Filter",
  "Page": "Seite",
  "Page Size": "Einträge pro Seite",
  "Count Algorithm": "Count Algorithm",
  "Method": "Methode",
  "Headers": "Kopfzeilen",
  "Query Parameters": "Abfrageparameter",
  "Body": "Körper",
  "Response is Binary ?": "Antwort ist binär?",
  "No Error on Failure": "Kein Fehler bei Fehler",
  "Timeout (in seconds)": "Timeout (in Sekunden)",
  "Select a table from your database": "Select a table from your database",
  "Enter the data for each column": "Enter the data for each column",
  "Whether to return the created row": "Whether to return the created row",
  "How to identify rows to update": "How to identify rows to update",
  "Select the column to filter on": "Wählen Sie die zu filternde Spalte",
  "The value to match against (not used for \"in list\" filter)": "Der zu treffende Wert (nicht für den Filter in der Liste)",
  "List of values for \"in list\" filter type": "Liste der Werte für den Filtertyp \"in der Liste\"",
  "Select which columns to update (auto-generated fields excluded)": "Wählen Sie die zu aktualisierenden Spalten (automatisch generierte Felder ausgeschlossen)",
  "Whether to count the number of updated rows": "Ob die Anzahl der aktualisierten Zeilen gezählt werden soll",
  "Whether to return the updated rows data": "Gibt an, ob die aktualisierten Datensätze zurückgegeben werden sollen",
  "Select the unique column to determine duplicates (required for upsert to work)": "Wählen Sie die eindeutige Spalte, um Duplikate zu bestimmen (erforderlich für Upsert zum Arbeiten)",
  "Enter data for the row (conflict detection handled separately)": "Geben Sie Daten für die Zeile ein (Konflikterkennung wird separat behandelt)",
  "Whether to count the number of upserted rows": "Ob die Anzahl der hochgeladenen Zeilen gezählt werden soll",
  "Whether to return the upserted rows data": "Gibt an, ob die gespeicherten Datensätze zurückgegeben werden sollen",
  "How to filter rows for deletion": "Filtern von Zeilen zum Löschen",
  "The value to match against (not used for null checks)": "Der übereinstimmende Wert (nicht für Nullprüfungen verwendet)",
  "List of values for \"in\" filter type": "Liste der Werte für den Filtertyp \"in\"",
  "Whether to count the number of deleted rows": "Gibt an, ob die Anzahl der gelöschten Zeilen gezählt werden soll",
  "Whether to return the deleted rows data": "Gibt an, ob die gelöschten Datensätze zurückgegeben werden sollen",
  "Columns to return (comma-separated). Leave empty to return all columns.": "Spalten zurückgeben (kommasepariert). Leer lassen um alle Spalten zurückzugeben.",
  "List of filters to apply": "Liste der anzuwendenden Filter",
  "Page number for pagination (starts from 1)": "Seitenzahl für Seitenzahl (beginnt ab 1)",
  "Number of records per page (max 1000)": "Anzahl der Datensätze pro Seite (max. 1000)",
  "Algorithm to use for counting rows": "Algorithmus zum Zählen von Zeilen",
  "Authorization headers are injected automatically from your connection.": "Autorisierungs-Header werden automatisch von Ihrer Verbindung injiziert.",
  "Enable for files like PDFs, images, etc..": "Aktivieren für Dateien wie PDFs, Bilder, etc..",
  "Column equals value": "Spalte entspricht dem Wert",
  "Column is in list of values": "Spalte ist in der Liste der Werte",
  "Column is greater than value": "Spalte ist größer als Wert",
  "Column not equals value": "Spalte entspricht nicht dem Wert",
  "Column is in list": "Spalte ist in der Liste",
  "Column is greater than": "Spalte ist größer als",
  "Column is greater than or equal": "Spalte ist größer oder gleich",
  "Column is less than": "Spalte ist kleiner als",
  "Column is less than or equal": "Spalte ist kleiner oder gleich",
  "Column is null": "Spalte ist null",
  "Column is not null": "Spalte ist nicht null",
  "Column matches pattern (LIKE)": "Spaltentreffen-Muster (LIKE)",
  "Column matches pattern (case-insensitive)": "Spalte entspricht dem Muster (Groß- und Kleinschreibung)",
  "Exact": "Exakt",
  "Planned": "Geplant",
  "Estimated": "Geschätzt",
  "GET": "ERHALTEN",
  "POST": "POST",
  "PATCH": "PATCH",
  "PUT": "PUT",
  "DELETE": "LÖSCHEN",
  "HEAD": "HEAD",
  "New Row": "Neue Zeile",
  "Fires when a new row is created in a table": "Feuert ab, wenn eine neue Zeile in einer Tabelle erstellt wird",
  "Markdown": "Markdown",
  "Schema": "Schema",
  "## Setup Instructions\n\n1. **Go to your Supabase Dashboard** → Database → Webhooks\n2. **Click \"Create a new hook\"**\n3. **Configure the webhook:**\n   - **Name**: Give it a descriptive name (e.g., \"Activepieces New Row\")\n   - **Table**: Select the table you want to monitor\n   - **Events**: Check \"Insert\" \n   - **Type**: HTTP Request\n   - **Method**: POST\n   - **URL**: Copy and paste the webhook URL below\n4. **Click \"Create webhook\"**\n\n**Webhook URL:** `{{webhookUrl}}`\n\n## Important Notes\n- The webhook will sen": "## Setup Instructions\n\n1. **Go to your Supabase Dashboard** → Database → Webhooks\n2. **Click \"Create a new hook\"**\n3. **Configure the webhook:**\n   - **Name**: Give it a descriptive name (e.g., \"Activepieces New Row\")\n   - **Table**: Select the table you want to monitor\n   - **Events**: Check \"Insert\" \n   - **Type**: HTTP Request\n   - **Method**: POST\n   - **URL**: Copy and paste the webhook URL below\n4. **Click \"Create webhook\"**\n\n**Webhook URL:** `{{webhookUrl}}`\n\n## Important Notes\n- The webhook will send a JSON payload with the new row data\n- Make sure your table has the necessary permissions\n- You can test the webhook by inserting a new row into your table\n\nFor more details, see [Supabase Database Webhooks documentation](https://supabase.com/docs/guides/database/webhooks).",
  "Database schema (default: public)": "Datenbankschema (Standard: öffentlich)"
}